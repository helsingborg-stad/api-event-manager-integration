/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./source/js/front/event-map.js":
/*!**************************************!*\
  !*** ./source/js/front/event-map.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function () {\n  if (!EventManagerIntegration) {\n    var EventManagerIntegration = {};\n  } // EventManagerIntegration = EventManagerIntegration || {};\n\n\n  EventManagerIntegration.Event = EventManagerIntegration.Event || {};\n\n  EventManagerIntegration.Event.Map = function () {\n    function Map() {\n      if ((typeof google === \"undefined\" ? \"undefined\" : _typeof(google)) === 'object' && _typeof(google.maps) === 'object') {\n        this.init();\n      }\n    }\n\n    Map.prototype.init = function () {\n      var mapElement, position, mapOptions, map, marker, infowindow, locationTitle;\n      mapElement = document.getElementById('event-map');\n\n      if (!mapElement) {\n        return;\n      }\n\n      position = {\n        lat: parseFloat(mapElement.getAttribute('data-lat')),\n        lng: parseFloat(mapElement.getAttribute('data-lng'))\n      };\n      mapOptions = {\n        zoom: 15,\n        center: position,\n        disableDefaultUI: false\n      };\n      map = new google.maps.Map(mapElement, mapOptions);\n      locationTitle = mapElement.getAttribute('data-title') ? mapElement.getAttribute('data-title') : '';\n      infowindow = new google.maps.InfoWindow({\n        content: '<b>' + locationTitle + '</b>'\n      });\n      marker = new google.maps.Marker({\n        position: position,\n        map: map\n      });\n\n      if (locationTitle) {\n        marker.addListener('click', function () {\n          infowindow.open(map, marker);\n        });\n      }\n    };\n\n    return new Map();\n  }();\n})());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvanMvZnJvbnQvZXZlbnQtbWFwLmpzPzBkMWYiXSwibmFtZXMiOlsiRXZlbnRNYW5hZ2VySW50ZWdyYXRpb24iLCJFdmVudCIsIk1hcCIsImdvb2dsZSIsIm1hcHMiLCJpbml0IiwicHJvdG90eXBlIiwibWFwRWxlbWVudCIsInBvc2l0aW9uIiwibWFwT3B0aW9ucyIsIm1hcCIsIm1hcmtlciIsImluZm93aW5kb3ciLCJsb2NhdGlvblRpdGxlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImxhdCIsInBhcnNlRmxvYXQiLCJnZXRBdHRyaWJ1dGUiLCJsbmciLCJ6b29tIiwiY2VudGVyIiwiZGlzYWJsZURlZmF1bHRVSSIsIkluZm9XaW5kb3ciLCJjb250ZW50IiwiTWFya2VyIiwiYWRkTGlzdGVuZXIiLCJvcGVuIl0sIm1hcHBpbmdzIjoiOzs7QUFBZSxnRUFBQyxZQUFNO0FBQ2xCLE1BQUcsQ0FBQ0EsdUJBQUosRUFBNEI7QUFBRSxRQUFJQSx1QkFBdUIsR0FBRyxFQUE5QjtBQUFtQyxHQUQvQyxDQUVsQjs7O0FBQ0FBLHlCQUF1QixDQUFDQyxLQUF4QixHQUFnQ0QsdUJBQXVCLENBQUNDLEtBQXhCLElBQWlDLEVBQWpFOztBQUVBRCx5QkFBdUIsQ0FBQ0MsS0FBeEIsQ0FBOEJDLEdBQTlCLEdBQXFDLFlBQVc7QUFFNUMsYUFBU0EsR0FBVCxHQUFlO0FBQ1gsVUFBSSxRQUFPQyxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQWxCLElBQThCLFFBQU9BLE1BQU0sQ0FBQ0MsSUFBZCxNQUF1QixRQUF6RCxFQUFtRTtBQUMvRCxhQUFLQyxJQUFMO0FBQ0g7QUFDSjs7QUFFREgsT0FBRyxDQUFDSSxTQUFKLENBQWNELElBQWQsR0FBcUIsWUFBVztBQUM1QixVQUFJRSxVQUFKLEVBQ0lDLFFBREosRUFFSUMsVUFGSixFQUdJQyxHQUhKLEVBSUlDLE1BSkosRUFLSUMsVUFMSixFQU1JQyxhQU5KO0FBUUFOLGdCQUFVLEdBQUdPLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixXQUF4QixDQUFiOztBQUVBLFVBQUksQ0FBQ1IsVUFBTCxFQUFpQjtBQUNiO0FBQ0g7O0FBRURDLGNBQVEsR0FBRztBQUNQUSxXQUFHLEVBQUVDLFVBQVUsQ0FBQ1YsVUFBVSxDQUFDVyxZQUFYLENBQXdCLFVBQXhCLENBQUQsQ0FEUjtBQUVQQyxXQUFHLEVBQUVGLFVBQVUsQ0FBQ1YsVUFBVSxDQUFDVyxZQUFYLENBQXdCLFVBQXhCLENBQUQ7QUFGUixPQUFYO0FBS0FULGdCQUFVLEdBQUc7QUFDVFcsWUFBSSxFQUFFLEVBREc7QUFFVEMsY0FBTSxFQUFFYixRQUZDO0FBR1RjLHdCQUFnQixFQUFFO0FBSFQsT0FBYjtBQU1BWixTQUFHLEdBQUcsSUFBSVAsTUFBTSxDQUFDQyxJQUFQLENBQVlGLEdBQWhCLENBQW9CSyxVQUFwQixFQUFnQ0UsVUFBaEMsQ0FBTjtBQUNBSSxtQkFBYSxHQUFHTixVQUFVLENBQUNXLFlBQVgsQ0FBd0IsWUFBeEIsSUFBd0NYLFVBQVUsQ0FBQ1csWUFBWCxDQUF3QixZQUF4QixDQUF4QyxHQUFnRixFQUFoRztBQUVBTixnQkFBVSxHQUFHLElBQUlULE1BQU0sQ0FBQ0MsSUFBUCxDQUFZbUIsVUFBaEIsQ0FBMkI7QUFDcENDLGVBQU8sRUFBRSxRQUFRWCxhQUFSLEdBQXdCO0FBREcsT0FBM0IsQ0FBYjtBQUlBRixZQUFNLEdBQUcsSUFBSVIsTUFBTSxDQUFDQyxJQUFQLENBQVlxQixNQUFoQixDQUF1QjtBQUM1QmpCLGdCQUFRLEVBQUVBLFFBRGtCO0FBRTVCRSxXQUFHLEVBQUVBO0FBRnVCLE9BQXZCLENBQVQ7O0FBS0EsVUFBSUcsYUFBSixFQUFtQjtBQUNmRixjQUFNLENBQUNlLFdBQVAsQ0FBbUIsT0FBbkIsRUFBNEIsWUFBVztBQUNuQ2Qsb0JBQVUsQ0FBQ2UsSUFBWCxDQUFnQmpCLEdBQWhCLEVBQXFCQyxNQUFyQjtBQUNILFNBRkQ7QUFHSDtBQUNKLEtBM0NEOztBQTZDQSxXQUFPLElBQUlULEdBQUosRUFBUDtBQUNILEdBdERtQyxFQUFwQztBQXdESCxDQTdEYyxHQUFmIiwiZmlsZSI6Ii4vc291cmNlL2pzL2Zyb250L2V2ZW50LW1hcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0ICgoKSA9PiB7XG4gICAgaWYoIUV2ZW50TWFuYWdlckludGVncmF0aW9uKXsgdmFyIEV2ZW50TWFuYWdlckludGVncmF0aW9uID0ge307IH1cbiAgICAvLyBFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbiA9IEV2ZW50TWFuYWdlckludGVncmF0aW9uIHx8IHt9O1xuICAgIEV2ZW50TWFuYWdlckludGVncmF0aW9uLkV2ZW50ID0gRXZlbnRNYW5hZ2VySW50ZWdyYXRpb24uRXZlbnQgfHwge307XG5cbiAgICBFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbi5FdmVudC5NYXAgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgZnVuY3Rpb24gTWFwKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBnb29nbGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBnb29nbGUubWFwcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIE1hcC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG1hcEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgbWFwT3B0aW9ucyxcbiAgICAgICAgICAgICAgICBtYXAsXG4gICAgICAgICAgICAgICAgbWFya2VyLFxuICAgICAgICAgICAgICAgIGluZm93aW5kb3csXG4gICAgICAgICAgICAgICAgbG9jYXRpb25UaXRsZTtcblxuICAgICAgICAgICAgbWFwRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdldmVudC1tYXAnKTtcblxuICAgICAgICAgICAgaWYgKCFtYXBFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwb3NpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBsYXQ6IHBhcnNlRmxvYXQobWFwRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGF0JykpLFxuICAgICAgICAgICAgICAgIGxuZzogcGFyc2VGbG9hdChtYXBFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1sbmcnKSlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIG1hcE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgem9vbTogMTUsXG4gICAgICAgICAgICAgICAgY2VudGVyOiBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICBkaXNhYmxlRGVmYXVsdFVJOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChtYXBFbGVtZW50LCBtYXBPcHRpb25zKTtcbiAgICAgICAgICAgIGxvY2F0aW9uVGl0bGUgPSBtYXBFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScpID8gbWFwRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGl0bGUnKSA6ICcnO1xuXG4gICAgICAgICAgICBpbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coe1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICc8Yj4nICsgbG9jYXRpb25UaXRsZSArICc8L2I+J1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICBtYXA6IG1hcFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChsb2NhdGlvblRpdGxlKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyLmFkZExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpbmZvd2luZG93Lm9wZW4obWFwLCBtYXJrZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXcgTWFwKCk7XG4gICAgfSkoKTtcblxufSkoKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./source/js/front/event-map.js\n");

/***/ }),

/***/ "./source/js/front/event-pagination.js":
/*!*********************************************!*\
  !*** ./source/js/front/event-pagination.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function () {\n  // Init\n  var EventManagerIntegration = {}; // Init event pagination\n\n  EventManagerIntegration = EventManagerIntegration || {};\n  EventManagerIntegration.Event = EventManagerIntegration.Event || {};\n\n  EventManagerIntegration.Event.Module = function ($) {\n    function Module() {\n      $(function () {\n        this.initEventPagination();\n      }.bind(this));\n    } // Load pagination bar to event modules\n\n\n    Module.prototype.initEventPagination = function () {\n      $(\".modularity-mod-event\").each(function (key, value) {\n        var moduleId = $(this).find('[data-module-id]').attr('data-module-id');\n        var pages = $(this).find('.module-pagination').attr('data-pages');\n        var showArrows = $(this).find('.module-pagination').attr('data-show-arrows');\n        var module = $(this);\n        $(this).find('.module-pagination').pagination({\n          pages: pages,\n          displayedPages: 4,\n          edges: 0,\n          cssStyle: '',\n          ellipsePageSet: false,\n          prevText: showArrows ? '&laquo;' : '',\n          nextText: showArrows ? '&raquo;' : '',\n          currentPage: 1,\n          selectOnClick: false,\n          onPageClick: function onPageClick(page, event) {\n            Module.prototype.loadEvents(page, moduleId, module);\n            $(module).find('.module-pagination').pagination('redraw');\n            $(module).find('.pagination a:not(.current)').each(function () {\n              $(this).parent().addClass('disabled temporary');\n            });\n          }\n        });\n      });\n    }; // Get event list with Ajax on pagination click\n\n\n    Module.prototype.loadEvents = function (page, moduleId, module) {\n      var height = $(module).find('.event-module-content').height();\n      var windowTop = $(window).scrollTop();\n      var moduleTop = $(module).offset().top;\n      $.ajax({\n        url: eventintegration.ajaxurl,\n        type: 'post',\n        data: {\n          action: 'ajax_pagination',\n          page: page,\n          id: moduleId\n        },\n        beforeSend: function beforeSend() {\n          $(module).find('.event-module-list').remove();\n          $(module).find('.event-module-content').append('<div class=\"event-loader\"><div class=\"loading-wrapper\"><div class=\"loading\"><div></div><div></div><div></div><div></div></div></div></div>');\n          $(module).find('.event-loader').height(height);\n\n          if (moduleTop < windowTop) {\n            $('html, body').animate({\n              scrollTop: moduleTop\n            }, 100);\n          }\n        },\n        success: function success(html) {\n          $(module).find('.event-module-content').append(html).hide().fadeIn(80).height('auto');\n        },\n        error: function error() {\n          $(module).find('.event-module-content').append('<ul class=\"event-module-list\"><li><p>' + eventIntegrationFront.event_pagination_error + '</p></li></ul>').hide().fadeIn(80).height('auto');\n        },\n        complete: function complete() {\n          $(module).find('.event-loader').remove();\n          $(module).find('.pagination .temporary').each(function () {\n            $(this).removeClass('disabled temporary');\n          });\n        }\n      });\n    };\n\n    return new Module();\n  }(jQuery);\n})());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./source/js/front/event-pagination.js\n");

/***/ }),

/***/ "./source/js/front/event-submit.js":
/*!*****************************************!*\
  !*** ./source/js/front/event-submit.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function () {\n  // Init submit event form\n  if (!EventManagerIntegration) {\n    var EventManagerIntegration = {};\n  }\n\n  EventManagerIntegration.Event = EventManagerIntegration.Event || {};\n\n  EventManagerIntegration.Event.Form = function ($) {\n    function Form() {\n      var _this = this;\n\n      document.addEventListener('DOMContentLoaded', function (event) {\n        $('.submit-event').each(function (index, eventForm) {\n          var apiUrl = eventintegration.apiurl;\n          apiUrl = apiUrl.replace(/\\/$/, '');\n          $('#recurring-event', eventForm).children('.box').hide();\n          this.handleEvents($(eventForm), apiUrl);\n          this.hyperformExtensions(eventForm);\n          this.datePickerSettings();\n\n          if (document.getElementById('location') !== null) {\n            this.loadPostType($(eventForm), apiUrl, 'location');\n          }\n\n          if (document.getElementById('organizer') !== null) {\n            this.loadPostType($(eventForm), apiUrl, 'organizer');\n          }\n\n          if (document.getElementById('user_groups') !== null) {\n            this.loadTaxonomy($(eventForm), apiUrl, 'user_groups');\n          }\n\n          if (document.getElementById('event_categories') !== null) {\n            this.loadTaxonomy($(eventForm), apiUrl, 'event_categories');\n          }\n\n          if (document.getElementById('event_tags') !== null) {\n            this.loadTaxonomy($(eventForm), apiUrl, 'event_tags');\n          }\n        }.bind(_this));\n      });\n    }\n    /**\n     * Add custom validations with Hyperform\n     */\n\n\n    Form.prototype.hyperformExtensions = function (eventForm) {\n      // Match email addresses\n      if ('submitter_repeat_email' in eventForm) {\n        hyperform.addValidator(eventForm.submitter_repeat_email, function (element) {\n          var valid = element.value === eventForm.submitter_email.value;\n          element.setCustomValidity(valid ? '' : eventIntegrationFront.email_not_matching);\n          return valid;\n        });\n      }\n\n      if ('image_input' in eventForm) {\n        hyperform.addValidator(eventForm.image_input, function (element) {\n          if (!$('#image_input').prop('required')) {\n            return true;\n          }\n\n          var valid = element.files.length > 0,\n              notice = eventForm.querySelector('.image-notice'),\n              noticeHtml = document.createElement('p');\n\n          if (!valid && !notice) {\n            noticeHtml.innerHTML = eventIntegrationFront.must_upload_image;\n            noticeHtml.className = 'text-danger image-notice';\n            eventForm.querySelector('.image-box').appendChild(noticeHtml);\n          }\n\n          element.setCustomValidity(valid ? '' : eventIntegrationFront.must_upload_image);\n          return valid;\n        });\n      }\n    }; // Get taxonomies from API and add to select box\n\n\n    Form.prototype.loadTaxonomy = function (eventForm, resource, taxonomy) {\n      resource += '/' + taxonomy + '?_jsonp=' + taxonomy + '&per_page=100';\n      var select = document.getElementById(taxonomy);\n      $.ajax({\n        type: 'GET',\n        url: resource,\n        cache: false,\n        dataType: 'jsonp',\n        jsonpCallback: taxonomy,\n        crossDomain: true,\n        success: function success(response) {\n          // Clear select\n          $(select).html(''); // Map up and populate hierarchical taxonomies\n\n          if (taxonomy === 'user_groups' || taxonomy === 'event_categories') {\n            var taxonomies = Form.prototype.hierarchicalTax(response); // Add select option and it's children taxonomies\n\n            $(taxonomies.children).each(function (index, tax) {\n              // Parent option\n              Form.prototype.addOption(tax, select, '');\n              $(tax.children).each(function (index, tax) {\n                // Children option\n                Form.prototype.addOption(tax, select, ' – ');\n                $(tax.children).each(function (index, tax) {\n                  // Grand children options\n                  Form.prototype.addOption(tax, select, ' – – ');\n                });\n              });\n            });\n          } else {\n            // Populate non hierarchical taxonomy lists\n            var taxonomies = response;\n            $(taxonomies).each(function (index, term) {\n              var opt = document.createElement('option');\n              opt.value = term.id;\n              opt.innerHTML += term.name;\n              select.appendChild(opt);\n            });\n          }\n        }\n      });\n    };\n\n    Form.prototype.addOption = function (taxonomy, select, depth) {\n      var opt = document.createElement('option');\n      opt.value = taxonomy.data.id;\n      opt.innerHTML += depth;\n      opt.innerHTML += taxonomy.data.name;\n      select.appendChild(opt);\n    };\n\n    function TreeNode(data) {\n      this.data = data;\n      this.parent = null;\n      this.children = [];\n    }\n\n    TreeNode.comparer = function (a, b) {\n      return a.data.name < b.data.name ? 0 : 1;\n    };\n\n    TreeNode.prototype.sortRecursive = function () {\n      this.children.sort(Form.prototype.comparer);\n\n      for (var i = 0, l = this.children.length; i < l; i++) {\n        this.children[i].sortRecursive();\n      }\n\n      return this;\n    }; // List taxonomy objects hierarchical\n\n\n    Form.prototype.hierarchicalTax = function (data) {\n      var nodeById = {},\n          i = 0,\n          l = data.length,\n          node; // Root node\n\n      nodeById[0] = new TreeNode(); // Make TreeNode objects for each item\n\n      for (i = 0; i < l; i++) {\n        nodeById[data[i].id] = new TreeNode(data[i]);\n      } // Link all TreeNode objects\n\n\n      for (i = 0; i < l; i++) {\n        node = nodeById[data[i].id];\n        node.parent = nodeById[node.data.parent];\n        node.parent.children.push(node);\n      }\n\n      return nodeById[0].sortRecursive();\n    }; // Get a post type from API and add to input init autocomplete\n\n\n    Form.prototype.loadPostType = function (eventForm, resource, postType) {\n      resource += '/' + postType + '/complete?_jsonp=get' + postType;\n      new autoComplete({\n        selector: '#' + postType + '-selector',\n        minChars: 1,\n        source: function source(term, suggest) {\n          term = term.toLowerCase();\n          $.ajax({\n            type: 'GET',\n            url: resource,\n            cache: false,\n            dataType: 'jsonp',\n            jsonpCallback: 'get' + postType,\n            crossDomain: true,\n            success: function success(response) {\n              var suggestions = [];\n              $(response).each(function (index, item) {\n                if (~item.title.toLowerCase().indexOf(term)) suggestions.push([item.title, item.id, postType]);\n              });\n              suggest(suggestions);\n            }\n          });\n        },\n        renderItem: function renderItem(item, search) {\n          search = search.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n          var re = new RegExp('(' + search.split(' ').join('|') + ')', 'gi');\n          return '<div class=\"autocomplete-suggestion\" data-type=\"' + item[2] + '\" data-langname=\"' + item[0] + '\" data-lang=\"' + item[1] + '\" data-val=\"' + search + '\"> ' + item[0].replace(re, '<b>$1</b>') + '</div>';\n        },\n        onSelect: function onSelect(e, term, item) {\n          $('#' + item.getAttribute('data-type') + '-selector').val(item.getAttribute('data-langname'));\n          $('#' + item.getAttribute('data-type')).val(item.getAttribute('data-lang'));\n        }\n      });\n    }; // Save+format input data and return as object\n\n\n    Form.prototype.jsonData = function (form) {\n      var arrData = form.serializeArray(),\n          objData = {},\n          groups = [],\n          categories = [],\n          tags = [];\n      $.each(arrData, function (index, elem) {\n        switch (elem.name) {\n          case 'user_groups':\n            groups = $.map(elem.value.split(','), function (value) {\n              return parseInt(value, 10);\n            });\n            break;\n\n          case 'event_categories':\n            categories.push(parseInt(elem.value));\n            break;\n\n          case 'event_tags':\n            tags.push(parseInt(elem.value));\n            break;\n\n          default:\n            objData[elem.name] = elem.value;\n        }\n      }); // Occasion\n\n      objData['occasions'] = [];\n      $('.occurance-group-single', form).each(function (index) {\n        var startDate = Form.prototype.formatDate($('[name=\"start_date\"]', this).val(), $('[name=\"start_time_h\"]', this).val(), $('[name=\"start_time_m\"]', this).val());\n        var endDate = Form.prototype.formatDate($('[name=\"end_date\"]', this).val(), $('[name=\"end_time_h\"]', this).val(), $('[name=\"end_time_m\"]', this).val());\n\n        if (startDate && endDate) {\n          objData['occasions'].push({\n            start_date: startDate,\n            end_date: endDate,\n            status: 'scheduled',\n            content_mode: 'master'\n          });\n        }\n      }); // Recurring occasions\n\n      objData['rcr_rules'] = [];\n      $('.occurance-group-recurring', form).each(function (index) {\n        var rcrStartH = $('[name=\"recurring_start_h\"]', this).val(),\n            rcrStartM = $('[name=\"recurring_start_m\"]', this).val();\n        var rcrStartTime = rcrStartH && rcrStartM ? Form.prototype.addZero(rcrStartH) + ':' + Form.prototype.addZero(rcrStartM) + ':' + '00' : false;\n        var rcrEndH = $('[name=\"recurring_end_h\"]', this).val(),\n            rcrEndM = $('[name=\"recurring_end_m\"]', this).val();\n        var rcrEndTime = rcrEndH && rcrEndM ? Form.prototype.addZero(rcrEndH) + ':' + Form.prototype.addZero(rcrEndM) + ':' + '00' : false;\n        var rcrStartDate = Form.prototype.isValidDate($('[name=\"recurring_start_d\"]', this).val()) ? $('[name=\"recurring_start_d\"]', this).val() : false;\n        var rcrEndDate = Form.prototype.isValidDate($('[name=\"recurring_end_d\"]', this).val()) ? $('[name=\"recurring_end_d\"]', this).val() : false;\n\n        if (rcrStartTime && rcrEndTime && rcrStartDate && rcrEndDate) {\n          objData['rcr_rules'].push({\n            rcr_week_day: $('[name=\"weekday\"]', this).val(),\n            rcr_weekly_interval: $('[name=\"weekly_interval\"]', this).val(),\n            rcr_start_time: rcrStartTime,\n            rcr_end_time: rcrEndTime,\n            rcr_start_date: rcrStartDate,\n            rcr_end_date: rcrEndDate\n          });\n        }\n      });\n\n      if ($('#organizer', form).val()) {\n        objData['organizers'] = [{\n          organizer: $(form).find('#organizer').val(),\n          main_organizer: true\n        }];\n      } // Add accessibility items\n\n\n      objData['accessibility'] = [];\n      $.each($(\"input[name='accessibility']:checked\"), function () {\n        objData['accessibility'].push($(this).val());\n      });\n      objData['user_groups'] = groups;\n      objData['event_categories'] = categories;\n      objData['event_tags'] = tags;\n      return objData;\n    }; // Send Ajax request with media data\n\n\n    Form.prototype.submitImageAjax = function (eventForm, imageData) {\n      imageData.append('action', 'submit_image');\n      return $.ajax({\n        url: eventintegration.ajaxurl,\n        type: 'POST',\n        cache: false,\n        contentType: false,\n        processData: false,\n        data: imageData,\n        error: function error(jqXHR, textStatus) {\n          console.log(textStatus);\n        }\n      });\n    }; // Send Ajax request with post data\n\n\n    Form.prototype.submitEventAjax = function (eventForm, formData) {\n      $.ajax({\n        url: eventintegration.ajaxurl,\n        type: 'POST',\n        data: {\n          action: 'submit_event',\n          data: formData\n        },\n        success: function success(response) {\n          if (response.success) {\n            $('.submit-success', eventForm).removeClass('hidden');\n            $('.submit-success .success', eventForm).empty().append('<i class=\"fa fa-send\"></i>Evenemanget har skickats!</li>');\n            Form.prototype.cleanForm(eventForm);\n          } else {\n            console.log(response.data);\n            $('.submit-success', eventForm).addClass('hidden');\n            $('.submit-error', eventForm).removeClass('hidden');\n            $('.submit-error .warning', eventForm).empty().append('<i class=\"fa fa-warning\"></i>' + response.data + '</li>');\n          }\n        },\n        error: function error(jqXHR, textStatus) {\n          $('.submit-success', eventForm).addClass('hidden');\n          $('.submit-error', eventForm).removeClass('hidden');\n          $('.submit-error .warning', eventForm).empty().append('<i class=\"fa fa-warning\"></i>' + textStatus + '</li>');\n        }\n      });\n    };\n\n    Form.prototype.endHourChange = function (event) {\n      var wrapper = event.target.closest('.occurrence');\n\n      if (wrapper) {\n        var startDate = wrapper.querySelector('input[name=\"start_date\"]').value,\n            endDate = wrapper.querySelector('input[name=\"end_date\"]').value,\n            startTimeH = wrapper.querySelector('input[name=\"start_time_h\"]').value;\n\n        if (startDate >= endDate) {\n          event.target.setAttribute('min', startTimeH);\n        } else {\n          event.target.setAttribute('min', 0);\n        }\n      }\n    };\n\n    Form.prototype.endMinuteChange = function (event) {\n      var wrapper = event.target.closest('.occurrence');\n\n      if (wrapper) {\n        var startDate = wrapper.querySelector('input[name=\"start_date\"]').value,\n            endDate = wrapper.querySelector('input[name=\"end_date\"]').value,\n            startTimeH = wrapper.querySelector('input[name=\"start_time_h\"]').value,\n            endTimeH = wrapper.querySelector('input[name=\"end_time_h\"]').value,\n            startTimeM = wrapper.querySelector('input[name=\"start_time_m\"]').value;\n\n        if (startDate >= endDate && startTimeH >= endTimeH) {\n          startTimeM = parseInt(startTimeM) + 10;\n\n          if (startTimeM >= 60) {\n            wrapper.querySelector('input[name=\"end_time_h\"]').setAttribute('min', parseInt(startTimeH) + 1);\n          } else {\n            event.target.setAttribute('min', startTimeM);\n          }\n        } else {\n          event.target.setAttribute('min', 0);\n        }\n      }\n    };\n\n    Form.prototype.initPickerEvent = function () {\n      var elements = document.querySelectorAll('input[name=\"start_date\"]');\n      Array.from(elements).forEach(function (element) {\n        element.onchange = function (e) {\n          if (e.target.value) {\n            var wrapper = e.target.closest('.occurrence');\n            $(wrapper).find('input[name=\"end_date\"]').datepicker('option', 'minDate', new Date(e.target.value));\n          }\n        }.bind(this);\n      }.bind(this));\n    };\n\n    Form.prototype.initEndHourEvent = function () {\n      var elements = document.querySelectorAll('input[name=\"end_time_h\"]');\n      Array.from(elements).forEach(function (element) {\n        element.onchange = this.endHourChange;\n      }.bind(this));\n    };\n\n    Form.prototype.initEndMinuteEvent = function () {\n      var elements = document.querySelectorAll('input[name=\"end_time_m\"]');\n      Array.from(elements).forEach(function (element) {\n        element.onchange = this.endMinuteChange;\n      }.bind(this));\n    };\n\n    Form.prototype.initRecurringEndHourEvent = function () {\n      var elements = document.querySelectorAll('input[name=\"recurring_end_h\"]');\n      Array.from(elements).forEach(function (element) {\n        element.onchange = function (event) {\n          var wrapper = event.target.closest('.occurrence');\n\n          if (wrapper) {\n            var startTimeH = wrapper.querySelector('input[name=\"recurring_start_h\"]').value;\n            event.target.setAttribute('min', startTimeH);\n          }\n        };\n      }.bind(this));\n    };\n\n    Form.prototype.initRecurringEndMinuteEvent = function () {\n      var elements = document.querySelectorAll('input[name=\"recurring_end_m\"]');\n      Array.from(elements).forEach(function (element) {\n        element.onchange = function (event) {\n          var wrapper = event.target.closest('.occurrence');\n\n          if (wrapper) {\n            var startTimeH = wrapper.querySelector('input[name=\"recurring_start_h\"]').value;\n            var endTimeH = wrapper.querySelector('input[name=\"recurring_end_h\"]').value;\n            var startTimeM = wrapper.querySelector('input[name=\"recurring_start_m\"]').value;\n\n            if (startTimeH >= endTimeH) {\n              startTimeM = parseInt(startTimeM) + 10;\n\n              if (startTimeM >= 60) {\n                wrapper.querySelector('input[name=\"recurring_end_h\"]').setAttribute('min', parseInt(startTimeH) + 1);\n              } else {\n                event.target.setAttribute('min', startTimeM);\n              }\n            } else {\n              event.target.setAttribute('min', 0);\n            }\n          }\n        };\n      }.bind(this));\n    };\n\n    Form.prototype.initDateEvents = function () {\n      // Single occasions events\n      this.initPickerEvent();\n      this.initEndHourEvent();\n      this.initEndMinuteEvent(); // Recurring date events\n\n      this.initRecurringEndHourEvent();\n      this.initRecurringEndMinuteEvent(); // set min and max dates\n\n      this.datePickerSettings();\n    };\n\n    Form.prototype.datePickerSettings = function () {\n      var aYearFromNow = new Date();\n      aYearFromNow.setFullYear(aYearFromNow.getFullYear() + 1);\n      ['input[name=\"start_date\"]', 'input[name=\"recurring_start_d\"]', 'input[name=\"end_date\"]', 'input[name=\"recurring_end_d\"]'].forEach(function (name) {\n        var els = document.querySelectorAll(name);\n\n        if (els) {\n          Array.from(els).forEach(function (element) {\n            if (['input[name=\"start_date\"]', 'input[name=\"recurring_start_d\"]'].includes(name)) $(element).datepicker('option', 'minDate', new Date());\n            $(element).datepicker('option', 'maxDate', aYearFromNow);\n          });\n        }\n      });\n      document.getElementById('ui-datepicker-div').style = \"display: none\";\n    };\n\n    Form.prototype.handleEvents = function (eventForm, apiUrl) {\n      this.initDateEvents();\n      $(eventForm).on('submit', function (e) {\n        e.preventDefault();\n        var fileInput = eventForm.find('#image_input'),\n            formData = this.jsonData(eventForm),\n            imageData = new FormData();\n        $('.submit-error', eventForm).addClass('hidden');\n        $('.submit-success', eventForm).removeClass('hidden');\n        $('.submit-success .success', eventForm).empty().append('<i class=\"fa fa-send\"></i>Skickar...</li>'); // Upload media first and append it to the post.\n\n        if (fileInput.val()) {\n          imageData.append('file', fileInput[0].files[0]);\n          $.when(this.submitImageAjax(eventForm, imageData)).then(function (response, textStatus) {\n            if (response.success) {\n              formData['featured_media'] = response.data;\n              Form.prototype.submitEventAjax(eventForm, formData);\n            } else {\n              $('.submit-success', eventForm).addClass('hidden');\n              $('.submit-error', eventForm).removeClass('hidden');\n              $('.submit-error .warning', eventForm).empty().append('<i class=\"fa fa-warning\"></i>' + eventIntegrationFront.something_went_wrong + '</li>');\n            }\n          }); // Submit post if media is not set\n        } else {\n          this.submitEventAjax(eventForm, formData);\n        }\n      }.bind(this)); // Show image approval terms\n\n      $('.img-button', eventForm).click(function (e) {\n        e.preventDefault();\n        $('.image-box', eventForm).hide();\n        $('.image-approve', eventForm).fadeIn();\n      }); // Show uploader if terms is approved\n\n      $('input[name=approve]', eventForm).change(function () {\n        var firstCheck = $('input:checkbox[id=first-approve]:checked', eventForm).length > 0;\n        var radioCheck = $('input:radio[name=approve]:checked').val();\n        var secondCheck = $('input:checkbox[id=second-approve]:checked', eventForm).length > 0;\n\n        if (firstCheck && radioCheck == 0 || firstCheck && secondCheck) {\n          $('.image-approve', eventForm).hide();\n          $('.image-upload', eventForm).fadeIn();\n        }\n      });\n      $('input:radio[name=approve]').change(function () {\n        if (this.value == 1) {\n          $('#persons-approve').removeClass('hidden');\n        } else {\n          $('#persons-approve').addClass('hidden');\n        }\n      }); // Show/hide occasion and reccuring occasion rules. And add required fields.\n\n      $('input:radio[name=occurance-type]', eventForm).change(function (event) {\n        var id = $(this).data('id');\n        $('#' + id).children('.form-group .box').show().find('input').prop('required', true);\n        $('#' + id).siblings('.event-occasion').children('.box').hide().find('input').prop('required', false);\n      }); // Add new occurance\n\n      $('.add-occurance', eventForm).click(function (event) {\n        event.preventDefault();\n        var $occuranceGroup = $(event.target).parent().prev('[class*=occurance-group]'),\n            $duplicate = $occuranceGroup.clone().find('input').val('').removeClass('hasDatepicker').removeAttr('id').end().insertAfter($occuranceGroup).find('.datepicker').datepicker().end(); // Re init date events\n\n        this.initDateEvents();\n\n        if ($('.remove-occurance', $duplicate).length === 0) {\n          var $removeButton = $('<div class=\"form-group\"><button class=\"btn btn btn-sm remove-occurance\"><i class=\"pricon pricon-minus-o\"></i> Ta bort</button></div>');\n          $duplicate.append($removeButton);\n        }\n      }.bind(this)); // Remove occurance\n\n      $(document).on('click', '.remove-occurance', function (e) {\n        e.preventDefault();\n        $(this).closest('[class*=occurance-group]').remove();\n      });\n    }; // Clean up form\n\n\n    Form.prototype.cleanForm = function (eventForm) {\n      $(':input', eventForm).not(':button, :submit, :reset, :hidden, select').val('').removeAttr('selected');\n    }; // Format date and time\n\n\n    Form.prototype.formatDate = function (date, hh, mm) {\n      var dateTime = '';\n\n      if (this.isValidDate(date) && hh && mm) {\n        dateTime = date + ' ' + this.addZero(hh) + ':' + this.addZero(mm) + ':00';\n      }\n\n      return dateTime;\n    }; // Check valid date format\n\n\n    Form.prototype.isValidDate = function (dateString) {\n      var regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\n      return dateString.match(regEx) != null;\n    }; // Prefix with zero\n\n\n    Form.prototype.addZero = function (i) {\n      if (i.toString().length === 1) {\n        i = '0' + i;\n      }\n\n      return i;\n    };\n\n    return new Form();\n  }($);\n})());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./source/js/front/event-submit.js\n");

/***/ }),

/***/ "./source/js/front/event-widget.js":
/*!*****************************************!*\
  !*** ./source/js/front/event-widget.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function () {\n  //Init event widget\n  if (!EventManagerIntegration) {\n    var EventManagerIntegration = {};\n  }\n\n  EventManagerIntegration.Widget = EventManagerIntegration.Widget || {}; //Component\n\n  EventManagerIntegration.Widget.TemplateParser = function ($) {\n    var date = new Date();\n    var dd = date.getDate();\n    var mm = date.getMonth() + 1;\n    var year = date.getFullYear();\n    var months = [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\"];\n    var template = {};\n    var errorTemplate = {};\n\n    function TemplateParser() {\n      this.init();\n    }\n\n    TemplateParser.prototype.init = function () {\n      $(\".event-api\").each(function (index, module) {\n        var dataApiurl = $(module).attr('data-apiurl');\n        dataApiurl = dataApiurl.replace(/\\/$/, \"\");\n        dataApiurl = dataApiurl + '/event/time?start=' + year + '-' + mm + '-' + dd + '&end=' + (year + 1) + '-' + mm + '-' + dd;\n        var dataLimit = $(module).attr('post-limit');\n        var dataGroupId = $(module).attr('group-id');\n        var dataCategoryId = $(module).attr('category-id');\n        var latlng = $(module).attr('latlng');\n        var distance = $(module).attr('distance');\n        var apiUrl = typeof dataLimit != 'undefined' && $.isNumeric(dataLimit) ? dataApiurl + '&post-limit=' + dataLimit : dataApiurl + '&post-limit=' + 10;\n        apiUrl += typeof dataGroupId != 'undefined' && dataGroupId ? '&group-id=' + dataGroupId : '';\n        apiUrl += typeof dataCategoryId != 'undefined' && dataCategoryId ? '&category-id=' + dataCategoryId : '';\n        apiUrl += typeof latlng != 'undefined' && latlng ? '&latlng=' + latlng : '';\n        apiUrl += typeof distance != 'undefined' && distance ? '&distance=' + distance : '';\n        apiUrl += '&_jsonp=getevents';\n        this.storeErrorTemplate($(module));\n        this.storeTemplate($(module));\n        this.storeModalTemplate($(module));\n        this.loadEvent($(module), apiUrl);\n      }.bind(this));\n    };\n\n    TemplateParser.prototype.storeTemplate = function (module) {\n      module.data('template', $('.template', module).html());\n      module.find('.template').remove();\n    };\n\n    TemplateParser.prototype.storeErrorTemplate = function (module) {\n      module.data('error-template', $('.error-template', module).html());\n      module.find('.error-template').remove();\n    };\n\n    TemplateParser.prototype.storeModalTemplate = function (module) {\n      module.data('modal-template', $('.modal-template', module).html());\n      module.find('.modal-template').remove();\n    };\n\n    TemplateParser.prototype.loadEvent = function (module, resource) {\n      $.ajax({\n        type: \"GET\",\n        url: resource,\n        cache: false,\n        dataType: \"jsonp\",\n        jsonpCallback: 'getevents',\n        crossDomain: true,\n        success: function success(response) {\n          //Store response on module\n          module.data('json-response', response); //Clear target div\n\n          TemplateParser.prototype.clear(module);\n          $(response).each(function (index, event) {\n            // Get the correct occasion\n            var eventOccasion = \"\";\n            $.each(event.occasions, function (occationindex, occation) {\n              if (typeof occation.current_occasion != 'undefined' && occation.current_occasion == true) {\n                eventOccasion = occation;\n                return false;\n              }\n            });\n            var occasionDate = new Date(eventOccasion.start_date); //Load template data\n\n            var moduleTemplate = module.data('template'); //Replace with values\n\n            moduleTemplate = moduleTemplate.replace('{event-id}', event.id);\n            moduleTemplate = moduleTemplate.replace('{event-occasion}', occasionDate.getDate() + '<div class=\"clearfix\"></div>' + months[occasionDate.getMonth()]);\n            moduleTemplate = moduleTemplate.replace('{event-title}', '<p class=\"link-item\">' + event.title.rendered + '</p>'); //Append\n\n            module.append(moduleTemplate);\n          }); //bind click\n\n          TemplateParser.prototype.click(module);\n        },\n        error: function error(response) {\n          TemplateParser.prototype.clear(module);\n          module.html(module.data('error-template'));\n        }\n      });\n    };\n\n    TemplateParser.prototype.clear = function (module) {\n      jQuery(module).html('');\n    };\n\n    TemplateParser.prototype.addZero = function (i) {\n      if (i < 10) {\n        i = \"0\" + i;\n      }\n\n      return i;\n    };\n\n    TemplateParser.prototype.click = function (module) {\n      jQuery(\"li a\", module).on('click', {}, function (e) {\n        var eventId = jQuery(e.target).closest(\"a.modal-event\").data('event-id');\n        $.each(module.data('json-response'), function (index, object) {\n          if (object.id == eventId) {\n            // Main modal\n            var modalTemplate = module.data('modal-template');\n            modalTemplate = modalTemplate.replace('{event-modal-title}', object.title.rendered);\n            modalTemplate = modalTemplate.replace('{event-modal-content}', object.content.rendered != null ? object.content.rendered : '');\n            modalTemplate = modalTemplate.replace('{event-modal-link}', object.event_link != null ? '<p><a href=\"' + object.event_link + '\" target=\"_blank\">' + object.event_link + '</a></p>' : '');\n            modalTemplate = modalTemplate.replace('{event-modal-image}', object.featured_media != null ? '<img src=' + object.featured_media.source_url + ' alt=\"' + object.title.rendered + '\" style=\"display:block; width:100%;\">' : ''); // Occations accordion section\n\n            var modalOccationResult = \"\";\n            $.each(object.occasions, function (occationindex, occation) {\n              // Format start and end date\n              var d = new Date(occation.start_date);\n              var start = this.addZero(d.getDate()) + ' ' + months[d.getMonth()] + ' ' + d.getFullYear() + ' kl. ' + this.addZero(d.getHours()) + ':' + this.addZero(d.getMinutes());\n              var e = new Date(occation.end_date);\n              var end = \"\";\n\n              if (e.getDate() === d.getDate()) {\n                end = 'kl. ' + this.addZero(e.getHours()) + ':' + this.addZero(e.getMinutes());\n              } else {\n                end = e.getDate() + ' ' + months[e.getMonth()] + ' ' + e.getFullYear() + ' kl. ' + this.addZero(e.getHours()) + ':' + this.addZero(e.getMinutes());\n              }\n\n              modalOccationResult = modalOccationResult + '<li class=\"text-sm gutter-sm gutter-vertical\">' + start + ' - ' + end + '</li>';\n            }.bind(this));\n            modalTemplate = modalTemplate.replace('{event-modal-occations}', '<section class=\"accordion-section\"><input type=\"radio\" name=\"active-section\" id=\"accordion-section-1\"><label class=\"accordion-toggle\" for=\"accordion-section-1\"><h2>Evenemanget inträffar</h2></label><div class=\"accordion-content\"><ul id=\"modal-occations\">' + modalOccationResult + '</ul></div></section>'); // Location accordion section\n\n            var locationData = \"\";\n            locationData += object.location != null && object.location.title != null ? '<li><strong>' + object.location.title + '</strong></li>' : '';\n            locationData += object.location != null && object.location.street_address != null ? '<li>' + object.location.street_address + '</li>' : '';\n            locationData += object.location != null && object.location.postal_code != null ? '<li>' + object.location.postal_code + '</li>' : '';\n            locationData += object.location != null && object.location.city != null ? '<il>' + object.location.city + '</li>' : '';\n            var location = locationData ? '<section class=\"accordion-section\"><input type=\"radio\" name=\"active-section\" id=\"accordion-section-2\"><label class=\"accordion-toggle\" for=\"accordion-section-2\"><h2>Plats</h2></label><div class=\"accordion-content\"><ul>' + locationData + '</ul></div></section>' : '';\n            modalTemplate = modalTemplate.replace('{event-modal-location}', location); // Boooking accordion section\n\n            var bookingData = \"\";\n            bookingData += object.booking_phone != null ? '<li>Telefon: ' + object.booking_phone + '</li>' : '';\n            bookingData += object.price_adult != null ? '<li>Pris: ' + object.price_adult + ' kr</li>' : '';\n            bookingData += object.price_children != null ? '<li>Barnpris: ' + object.price_children + ' kr</li>' : '';\n            bookingData += object.price_senior != null ? '<li>Pensionärspris: ' + object.price_senior + ' kr</li>' : '';\n            bookingData += object.price_student != null ? '<li>Studentpris: ' + object.price_student + ' kr</li>' : '';\n            bookingData += object.age_restriction != null ? '<li>Åldersgräns: ' + object.age_restriction + ' kr</li>' : '';\n            var membershipCards = \"\";\n            $.each(object.membership_cards, function (cardindex, card) {\n              membershipCards = membershipCards + '<li>' + card.post_title + '</li>';\n            }.bind(this));\n            bookingData += membershipCards ? '<li>&nbsp;</li><li><strong>Ingår i medlemskort</strong></li>' + membershipCards : '';\n            bookingData += object.booking_link != null ? '<li>&nbsp;</li><li><a href=\"' + object.booking_link + '\" class=\"link-item\" target=\"_blank\">Boka bljetter här</a></li>' : '';\n            var booking = bookingData ? '<section class=\"accordion-section\"><input type=\"radio\" name=\"active-section\" id=\"accordion-section-3\"><label class=\"accordion-toggle\" for=\"accordion-section-3\"><h2>Bokning</h2></label><div class=\"accordion-content\"><ul>' + bookingData + '</ul></div></section>' : '';\n            modalTemplate = modalTemplate.replace('{event-modal-booking}', booking);\n            $('#modal-event').remove();\n            $('body').append(modalTemplate);\n          }\n        }.bind(this));\n      }.bind(this));\n    };\n\n    return new TemplateParser();\n  }(jQuery);\n})());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./source/js/front/event-widget.js\n");

/***/ }),

/***/ "./source/js/front/index.js":
/*!**********************************!*\
  !*** ./source/js/front/index.js ***!
  \**********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _event_pagination__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-pagination */ \"./source/js/front/event-pagination.js\");\n/* harmony import */ var _event_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event-map */ \"./source/js/front/event-map.js\");\n/* harmony import */ var _event_submit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./event-submit */ \"./source/js/front/event-submit.js\");\n/* harmony import */ var _event_widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./event-widget */ \"./source/js/front/event-widget.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvanMvZnJvbnQvaW5kZXguanM/ODJhMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vc291cmNlL2pzL2Zyb250L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL2V2ZW50LXBhZ2luYXRpb24nO1xuaW1wb3J0ICcuL2V2ZW50LW1hcCc7XG5pbXBvcnQgJy4vZXZlbnQtc3VibWl0JztcbmltcG9ydCAnLi9ldmVudC13aWRnZXQnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./source/js/front/index.js\n");

/***/ }),

/***/ 1:
/*!****************************************!*\
  !*** multi ./source/js/front/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./source/js/front/index.js */"./source/js/front/index.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMENBQTBDLGdDQUFnQztRQUMxRTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLHdEQUF3RCxrQkFBa0I7UUFDMUU7UUFDQSxpREFBaUQsY0FBYztRQUMvRDs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EseUNBQXlDLGlDQUFpQztRQUMxRSxnSEFBZ0gsbUJBQW1CLEVBQUU7UUFDckk7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwyQkFBMkIsMEJBQTBCLEVBQUU7UUFDdkQsaUNBQWlDLGVBQWU7UUFDaEQ7UUFDQTtRQUNBOztRQUVBO1FBQ0Esc0RBQXNELCtEQUErRDs7UUFFckg7UUFDQTs7O1FBR0E7UUFDQSIsImZpbGUiOiJqcy9ldmVudC1pbnRlZ3JhdGlvbi1mcm9udC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=